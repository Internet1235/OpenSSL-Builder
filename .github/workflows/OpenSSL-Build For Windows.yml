name: Build OpenSSL on Windows

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@main # 检出代码

    - name: Install dependencies
      run: |
        choco install perl
        choco install nasm
        choco install make
        # 安装其他可能需要的依赖，如VC++ Build Tools等，如果需要可以添加
        
    - name: add NASM to path
      shell: cmd
      run: |
        set path="C:\Program Files\NASM" # 将NASM添加进环境变量中
     
    - name: Clone source code
      run: |
        git clone https://github.com/openssl/openssl.git


    - name: Configure OpenSSL
      run: |
        cd openssl # 假设你的OpenSSL源代码在仓库的openssl目录下
        perl Configure VC-WIN64A no-asm --prefix=C:\OpenSSL_build # 根据你的需求配置OpenSSL

    - name: Build OpenSSL
      id: compile
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cd openssl
        nmake
        nmake install
        "status=success" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Archive artifacts
      uses: actions/upload-artifact@main
      with:
        name: openssl-windows
        path: C:\OpenSSL_build # 上传编译好的OpenSSL文件作为构建产物

    - name: Generate release tag
      id: tag
      if: steps.compile.outputs.status == 'success'
      run: |
        cd C:\
        7z a openssl-for-windows.zip for windows .\OpenSSL_build\
        "release_tag=$(date +"%Y.%m.%d-%H%M")" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "status=success" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: C:\openssl-for-windows.zip
